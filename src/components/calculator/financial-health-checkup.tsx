
"use client";

import { useState, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { CircularProgressbar, buildStyles } from "react-circular-progressbar";
import "react-circular-progressbar/dist/styles.css";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import usePersistentState from "@/hooks/use-persistent-state";
import { useToast } from "@/hooks/use-toast";

const questions = [
  { id: 'income', label: "üí∞ What is your monthly take-home salary (after tax)?", type: "number" },
  { id: 'savings', label: "üìà How much do you typically save or invest each month?", type: "number" },
  { id: 'emi', label: "üè¶ What is your total monthly EMI payment?", type: "number" },
  { id: 'goal', label: "üéØ What is your primary financial goal?", type: "select", options: ["Debt-Free", "Retirement", "Emergency Fund", "Home Purchase", "Wealth Growth"] },
];

export default function FinancialHealthCheckup() {
  const [step, setStep] = useState(0);
  const [income, setIncome] = usePersistentState("fhc-income", 50000);
  const [savings, setSavings] = usePersistentState("fhc-savings", 10000);
  const [emi, setEmi] = usePersistentState("fhc-emi", 15000);
  const [goal, setGoal] = usePersistentState("fhc-goal", "Wealth Growth");
  const [report, setReport] = useState<any>(null);
  const reportRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const stateSetters: { [key: string]: Function } = {
    income: setIncome,
    savings: setSavings,
    emi: setEmi,
    goal: setGoal,
  };

  const stateValues: { [key: string]: any } = {
    income,
    savings,
    emi,
    goal,
  };

  const calculateReport = () => {
    const incomeNum = Number(income);
    const savingsNum = Number(savings);
    const emiNum = Number(emi);

    if(incomeNum <= 0) {
        toast({ variant: "destructive", title: "Invalid Input", description: "Income must be greater than zero." });
        return;
    }

    const savingsRate = Math.round((savingsNum / incomeNum) * 100);
    const dti = Math.round((emiNum / incomeNum) * 100);

    let score = 50;
    if (savingsRate >= 20) score += 25;
    else if (savingsRate >= 10) score += 10;

    if (dti <= 20) score += 25;
    else if (dti <= 35) score += 10;
    else if (dti > 50) score -= 20;

    score = Math.max(0, Math.min(100, score));

    const summary =
      score >= 80
        ? "Excellent! You have strong financial habits. Keep up the great work. üéâ"
        : score >= 60
        ? "You‚Äôre on the right track, but there‚Äôs room for improvement. üöÄ"
        : "Your finances need attention. Let's make a plan. üí°";

    setReport({ score, summary, savingsRate, dti, goal });
    setStep(step + 1);
  };

  const downloadPDF = async () => {
    if (!reportRef.current) return;
    toast({ title: "Generating PDF...", description: "Please wait a moment." });
    
    try {
        const canvas = await html2canvas(reportRef.current, { scale: 2, backgroundColor: null });
        const imgData = canvas.toDataURL("image/png");

        const pdf = new jsPDF("p", "mm", "a4");
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = pdfWidth - 20;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        
        pdf.setFontSize(18);
        pdf.setTextColor(40, 40, 40);
        pdf.text("Your Financial Health Report", pdfWidth / 2, 20, { align: 'center' });
        
        pdf.addImage(imgData, "PNG", 10, 30, imgWidth, imgHeight);

        pdf.setFontSize(10);
        pdf.setTextColor(150, 150, 150);
        pdf.text(
          "Generated by CalcPro.online | Smarter Calculators for Everyone",
          pdfWidth / 2,
          pdfHeight - 10,
          { align: 'center' }
        );

        pdf.save("CalcPro_Financial_Report.pdf");
    } catch (e) {
        toast({ variant: "destructive", title: "Error", description: "Failed to generate PDF." });
    }
  };

  const currentQuestion = questions[step];
  const isFinalQuestion = step === questions.length - 1;

  const renderContent = () => {
    if (report) {
      return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-center" ref={reportRef}>
            <Card className="p-6">
                <CardHeader>
                    <CardTitle className="text-3xl">Your Financial Report</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="w-40 h-40 mx-auto">
                        <CircularProgressbar
                        value={report.score}
                        text={`${report.score}`}
                        styles={buildStyles({
                            pathColor: report.score >= 80 ? "hsl(var(--primary))" : report.score >= 60 ? "#facc15" : "#ef4444",
                            textColor: "hsl(var(--primary))",
                            trailColor: "hsl(var(--muted))",
                        })}
                        />
                    </div>
                    <p className="text-lg font-medium">{report.summary}</p>
                    <div className="grid grid-cols-2 gap-4 text-left">
                        <p>üíæ Savings Rate: <b className="text-primary">{report.savingsRate}%</b></p>
                        <p>üè¶ Debt-to-Income: <b className="text-primary">{report.dti}%</b></p>
                    </div>
                     <p>üéØ Primary Goal: <b className="text-primary">{report.goal}</b></p>
                </CardContent>
            </Card>
            <Button onClick={downloadPDF} className="mt-6" size="lg">Download Report (PDF)</Button>
        </motion.div>
      );
    }
    
    return (
        <AnimatePresence mode="wait">
            <motion.div
                key={step}
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -50 }}
                transition={{ duration: 0.3 }}
                className="space-y-6"
            >
                <div className="text-center">
                    <p className="text-sm text-muted-foreground">Step {step + 1} of {questions.length}</p>
                    <h3 className="text-xl font-semibold mt-1">{currentQuestion.label}</h3>
                </div>

                {currentQuestion.type === "number" ? (
                    <Input
                    type="number"
                    value={stateValues[currentQuestion.id]}
                    onChange={(e) => stateSetters[currentQuestion.id](e.target.value)}
                    className="h-12 text-lg text-center"
                    placeholder="Enter amount in ‚Çπ"
                    />
                ) : (
                    <Select value={stateValues[currentQuestion.id]} onValueChange={stateSetters[currentQuestion.id]}>
                        <SelectTrigger className="h-12 text-lg"><SelectValue /></SelectTrigger>
                        <SelectContent>
                            {currentQuestion.options?.map((opt) => (
                                <SelectItem key={opt} value={opt}>{opt}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                )}

                <div className="flex justify-between mt-6">
                    <Button variant="ghost" onClick={() => setStep(step - 1)} disabled={step === 0}>Back</Button>
                    {isFinalQuestion ? (
                    <Button onClick={calculateReport}>Get My Report</Button>
                    ) : (
                    <Button onClick={() => setStep(step + 1)}>Next</Button>
                    )}
                </div>
            </motion.div>
        </AnimatePresence>
    );
  }

  return (
    <div className="max-w-2xl mx-auto">
        <Card className="overflow-hidden">
            <CardContent className="p-8">
              {renderContent()}
            </CardContent>
        </Card>
    </div>
  );
}
